// Generated by CoffeeScript 1.6.3
(function() {
	require(["mesh/geom"], function(geom) {
		
		//This function is called when scripts/helper/util.js is loaded.
		//If util.js calls define(), then this function is not fired until
		//util's dependencies have loaded, and the util argument will hold
		//the module value for "helper/util".
		var Turtle, Vec3, hem;
		hem = geom.hem, Vec3 = geom.Vec3;
		gen = geom.gen, Cube = gen.Cube;
		console.log(geom)
		console.log(gen)
		Turtle = (function() {
			function Turtle(hem, face) {
				var avgDist, center, distances, vertices;
				this.hem = hem;
				this.face = face;
				this.direction = Vec3.create().copy(face.getNormal());
				center = face.getCenter();
				avgDist = 0;
				vertices = face.getAllVertices();
				distances = vertices.map(function(v) {
					var dist;
					dist = v.position.distance(center);
					return avgDist += dist;
				});
				this.avgDist = avgDist / vertices.length;
				this.radiusScale = 1;
			}

			Turtle.prototype.move = function(distance) {
				var avgDist, center, distances, radiusScale;
				this.hem.clearFaceSelection().selectFace(this.face).extrude(distance);
				distances = this.distances;
				center = this.face.getCenter();
				radiusScale = this.radiusScale;
				avgDist = this.avgDist;
				return this.face.getAllVertices().forEach(function(v, i) {
					return v.position.sub(center).normalize().scale(avgDist * radiusScale).add(center);
				});
			};

			return Turtle;

		})();
		console.log(hem)
		console.log(geom)
		console.log(gen)
		this.hem = hem().fromGeometry(new Cube(1, 1, 1));
		console.log(this.hem)
		this.mesh = new Mesh(this.hem.toFlatGeometry(), this.material);
		console.log(this.mesh)
		this.hem.selectRandomFaces().subdivide().selectRandomFaces(1000);
		selectedFaces = this.hem.getSelectedFaces();
		console.log(selectedFaces)
		this.turtles = selectedFaces.map(function(face) {
			return new Turtle(_this.hem, face);
		});
		console.log(this.turtles)

	});

}).call(this);